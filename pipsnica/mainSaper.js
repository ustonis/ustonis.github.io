class DifficultGame {
    constructor(name, sizeOfMap, mines) {
        this.name = name;
        this.sizeOfMap = sizeOfMap;
        this.mines = mines; // –¥–æ–±–∞–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –¥–ª—è –∫–∞–∂–¥–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
let noob = new DifficultGame("noob", 10, 10)
let starter = new DifficultGame("starter", 20, 40)
let pro = new DifficultGame("pro", 50, 150)
let god = new DifficultGame("god", 100, 400)

function startGame() {
    let difficult = document.getElementById("difficultGame").value
    switch(difficult) {
        case "noob": 
            difficult = noob;
            break;
        case "starter": 
            difficult = starter;
            break;
        case "pro": 
            difficult = pro;
            break;
        case "god": 
            difficult = god;
            break;
    }
    localStorage.setItem('difGame', JSON.stringify(difficult));
    window.location.href = "gameSaper.html"

}

function createGame() {
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    let difficultData = JSON.parse(localStorage.getItem('difGame'));
    let size = difficultData.sizeOfMap;
    let minesCount = difficultData.mines;
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    let map = Array(size).fill().map(() => Array(size).fill(0));
    
    // –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω—ã
    let minesPlaced = 0;
    while (minesPlaced < minesCount) {
        let a = Math.floor(Math.random() * size);
        let b = Math.floor(Math.random() * size);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –º–∏–Ω—ã –≤ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ
        if (map[a][b] !== -1) {
            map[a][b] = -1;
            minesPlaced++;
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const gameContainer = document.getElementById("mainContent");
    gameContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–≥—Ä—É
    gameContainer.style.display = 'grid';
    gameContainer.style.gridTemplateColumns = `repeat(${size}, 30px)`; // –°–µ—Ç–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–∞—Ä—Ç—ã
    gameContainer.style.gap = '2px';
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–∏—Ñ—Ä—ã –≤–æ–∫—Ä—É–≥ –º–∏–Ω
    for (let i = 0; i < size; i++) {
        for (let j = 0; j < size; j++) {
            if (map[i][j] !== -1) {
                let count = 0;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π
                for(let di = -1; di <= 1; di++) {
                    for(let dj = -1; dj <= 1; dj++) {
                        if(di === 0 && dj === 0) continue;
                        
                        let ni = i + di;
                        let nj = j + dj;
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
                        if (ni >= 0 && ni < size && nj >= 0 && nj < size) {
                            if (map[ni][nj] === -1) {
                                count++;
                            }
                        }
                    }
                }
                map[i][j] = count;
                
                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–ª–µ—Ç–∫–∏ —Å —Ü–∏—Ñ—Ä–æ–π
                let b = document.createElement("button"); 
                b.className = "button";
                b.innerText = ""; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–∏—Ñ—Ä—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫–ª–∏–∫–µ
                b.dataset.value = count; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ data-–∞—Ç—Ä–∏–±—É—Ç–µ
                b.dataset.i = i;
                b.dataset.j = j;
                b.id = `button-${i}-${j}`; 
                b.addEventListener('click', function() {
                    handleCellClick(this);
                });
                gameContainer.appendChild(b);
            } else {
                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –º–∏–Ω—ã
                let b = document.createElement("button"); 
                b.className = "button mine";
                b.innerText = ""; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—É —Å—Ä–∞–∑—É
                b.dataset.value = -1;
                b.dataset.i = i;
                b.dataset.j = j;
                b.id = `button-${i}-${j}`; 
                b.addEventListener('click', function() {
                    handleCellClick(this);
                });
                gameContainer.appendChild(b);
            }
        }
    }
    
    
}

function returnToMain() {
    localStorage.setItem('difGame', null);
    window.location.href = "index.html"
}
function backToPipi() {
    window.location.href = "main.html"
}
// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ
function handleCellClick(button) {
    const value = button.dataset.value;
    const i = button.dataset.i;
    const j = button.dataset.j;
    
    if (value === "-1") {
        // –ï—Å–ª–∏ —ç—Ç–æ –º–∏–Ω–∞
        button.innerText = "üí£";
        button.style.backgroundColor = "red";
        alert("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—ã –Ω–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –º–∏–Ω—É!");
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        localStorage.setItem('difGame', null);
        window.location.href = "index.html"
        
    } else {
        // –ï—Å–ª–∏ —ç—Ç–æ —Ü–∏—Ñ—Ä–∞
        button.innerText = value;
        button.style.backgroundColor = "#e0e0e0";
        button.disabled = true;
        
    }
}

function goToSaperRules() {
    window.location.href = "rulesSaper.html"
}




